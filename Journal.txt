The local storage for the cart reducer in the store index.js really gave me a very very tough time, chatgpt came to the rescue, here is the explanation of the codes in that cart reducer:

1.
const initialCartSlice = {
  cartItems: localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : [],
  cartTotalQty: 0,
  cartTotalAmnt: 0,
};
expanation:
In this code snippet, we define the initial state for the cart slice. The cartItems property is initialized by retrieving the value from the local storage using localStorage.getItem('cartItems'). If a value exists in the local storage, it is parsed using JSON.parse(). If there is no value in the local storage or the parsing fails, an empty array is used as the default value. The cartTotalQty and cartTotalAmnt properties are set to 0.

2.
const cartSlice = createSlice({
  name: "cart",
  initialState: initialCartSlice,
  reducers: {
    ADDPRODUCT_TO_STORE(state, action) {
      if (!Array.isArray(state.cartItems)) {
        state.cartItems = [];
      }

      const productIndex = state.cartItems.findIndex(
        (item) => item.id === action.payload.id
      );

      if (productIndex >= 0) {
        state.cartItems[productIndex].quantity += 1;
        console.log(`${action.payload.name} increased by one`);
      } else {
        const tempProduct = { ...action.payload, quantity: 1 };
        state.cartItems.push(tempProduct);
        console.log(`${action.payload.name} added to cart`);
      }

      localStorage.setItem("cartItems", JSON.stringify(state.cartItems));

      state.cartTotalQty = calculateCartTotalQty(state.cartItems);
      state.cartTotalAmnt = calculateCartTotalAmnt(state.cartItems);
    },

    // Other reducer cases...

  },
});

3.
    ADDPRODUCT_TO_STORE(state, action) {
      if (!Array.isArray(state.cartItems)) {
        state.cartItems = [];
       
        explanation:In this part of the code, we are checking if the cartItems in our state is an array. If it's not an array, it means that we have a problem or it hasn't been initialized properly.

        Imagine you have a collection of toys, and you want to check if you have a specific toy in your collection. But if you don't have any toys at all or your toy collection is missing, it would be hard to find that specific toy, right? So, in this code, we are making sure that our toy collection (i.e., cartItems) is always there.

        If it's not there (not an array), we set it to an empty collection (an empty array) so that we can add toys to it later.

        So we perform a check to ensure that state.cartItems is an array. If it's not an array (possibly due to an initialization issue or incorrect local storage value), we set it to an empty array using state.cartItems = [].

        In JavaScript, the Array.isArray() function is used to check if a value is an array or not. It returns true if the value is an array and false otherwise. 
        In simpler terms, ! means "not". So, !Array.isArray(state.cartItems) is checking if state.cartItems is not an array. So, in simpler terms, the code is checking if state.cartItems is not already an array and setting it to an empty array if that's the case.
      }


    }





THIS IS THE STATE OF THE LOCAL STORAGE I AM WORKING WITH NOW, NO ERRORS FOR NOW,EVERYTHING WORKS WELL

const cartSlice = createSlice({
  name: "cart",
  initialState: initialCartSlice,
  reducers: {
    ADDPRODUCT_TO_STORE(state, action) {
      const productIndex = state.cartItems.findIndex(
        (item) => item.id === action.payload.id
      );
      if (productIndex >= 0) {
        //Item already exists in the cart
        //Increase the cartQuantity
        // state.cartTotalQty ++;
        state.cartItems[productIndex].quantity += 1;
        console.log(`${action.payload.name} increased by one`);
      } else {
        //Item doesn't exist in the cart
        //Add item to the cart
        const tempProduct = { ...action.payload, quantity: 1 };
        state.cartItems.push(tempProduct);
        console.log(`${action.payload.name} added to cart`);
      }
      // save cart to Local Storage
      localStorage.setItem("cartItems", JSON.stringify(state.cartItems));
      state.cartTotalQty = calculateCartTotalQty(state.cartItems);
      state.cartTotalAmnt = calculateCartTotalAmnt(state.cartItems);
    },
    
    DECREASEPRODUCT_FROM_CART(state, action) {
      const productIndex = state.cartItems.findIndex(
        (item) => item.id === action.payload.id
      );
      if (state.cartItems[productIndex].quantity > 1) {
        state.cartItems[productIndex].quantity -= 1;
        console.log(`${action.payload.name} decreased by one`);
      } else if (state.cartItems[productIndex].quantity === 1) {
        const newCartItem = state.cartItems.filter(
          (item) => item.id !== action.payload.id
        );
        state.cartItems = newCartItem;
        console.log(`${action.payload.name} removed from cart`)
      }
      localStorage.setItem('cartItems', JSON.stringify(state.cartItems))
      state.cartTotalQty = calculateCartTotalQty(state.cartItems);
      state.cartTotalAmnt = calculateCartTotalAmnt(state.cartItems);

      // state.cartTotalQty = calculateCartTotalQty(state.cartItems);
      // state.cartTotalAmnt = calculateCartTotalAmnt(state.cartItems);
    },
    CART_TOTALQUANTITY(state){
      const array =[];
      state.cartItems.map((item)=>{
        const {quantity} = item;
        const cartQty = quantity;
        return array.push(cartQty)
      });
      const totalQty = array.reduce((a,b)=>{
        return a+ b
      },0);
      state.cartTotalQty = totalQty
      localStorage.setItem("totalQuantity", JSON.stringify(state.cartTotalQty));
    },
    CART_TOTALAMOUNT(state){
      const array = [];
      state.cartItems.map((item)=>{
        const{price,quantity} = item;
        const cartItemAmount=price * quantity;
        return array.push(cartItemAmount)
      });
      const totalAmount = array.reduce((a,b)=>{
        return a + b
      },0)
      state.cartTotalAmnt = totalAmount
      //localStorage.setItem('cartItems', JSON.stringify(state.cartItems))
      localStorage.setItem("totalAmount", JSON.stringify(state.cartTotalAmnt));
    },
    REMOVEPRODUCT_FROM_CART(state, action) {
      // console.log(action.payload);
      const product = action.payload;
      const existingItem = state.cartItems.find(
        (item) => item.id === product.id
      );
      if (existingItem) {
        state.cartItems = state.cartItems.filter(
          (item) => item.id !== product.id
        );
      }
      localStorage.setItem('cartItems', JSON.stringify(state.cartItems))
      state.cartTotalQty = calculateCartTotalQty(state.cartItems);
      state.cartTotalAmnt = calculateCartTotalAmnt(state.cartItems);
    },
    CLEAR_CART(state) {
      state.cartItems = [];
      // localStorage.setItem('cartItems',JSON.stringify(state.cartItems))
      localStorage.clear();
      state.cartTotalQty = 0; 
    },
  },
});
const calculateCartTotalQty = (cartItems) => {
  return cartItems.reduce((total, item) => total + item.quantity, 0);
}
const calculateCartTotalAmnt = (cartTotalAmnt) => {
  return cartTotalAmnt.reduce((total, item) =>total+item.price*item.quantity, 0);
}
const store = configureStore({
  reducer: {
    auth: authSlice.reducer,
    products: productsSlice.reducer,
    filter: filteredSlice.reducer,
    cart: cartSlice.reducer,
  },
});

export const authActions = authSlice.actions;
export const productsActions = productsSlice.actions;
export const filterActions = filteredSlice.actions;
export const cartActions = cartSlice.actions;
export default store;
